setup_image = 'eye.png';

% Load the image
loaded_img =  imread(setup_image);
%Create Blank and white file
bg_loaded_img = rgb2gray( loaded_img );

%img = histeq( loaded_img );
img = histeq( bg_loaded_img );

[ center, rad ] = getXYImage( loaded_img , 75 );
%imshow(loaded_img)
% Input parameters

xPosPupil = center();
yPosPupil = center(1,2);
rPupil = 70;
xPosIris = center(1,1);
yPosIris = center(1,2);
rIris = 250;

% xPosPupil = 625;
% yPosPupil = 306;
% rPupil = 70;
% xPosIris = 625;
% yPosIris = 306;
% rIris = 250;

%% 1 Normalize the iris region according to daugmans model
irisRegion_1 = rubberSheetNormalisation( img, xPosPupil, yPosPupil, rPupil , xPosIris , yPosIris , rIris, 'DebugMode', 1 );


%% 2 Normalize the iris region according to daugmans model and defining the
% number of samples in radial and angular direction
irisRegion_2 = rubberSheetNormalisation( img, xPosPupil, yPosPupil, rPupil , xPosIris , yPosIris , rIris, ...
    'DebugMode', 1,'RadiusSamples', 5,'AngleSamples', 10 ...
);

%% 3 Turn Interpolation off - - - - - - - - - - - - - - - - - -
%  By default the samples are interpolated, however it is also possible to
%  use neirest neighbor interpolation (no interpolation). This speeds up
%  the computation, but is less preciese. 
% Normalize the iris region according to daugmans model and defining the
% number of samples in radial and angular direction
irisRegion_3 = rubberSheetNormalisation( img, xPosPupil, yPosPupil, rPupil , xPosIris , yPosIris , rIris, ...
    'DebugMode', 0,'UseInterpolation', 0 ...
);

%% Prueba de funcion
IrisVector = getVectorImage( irisRegion_3 , 0.3 );


imshow(irisRegion_3);
